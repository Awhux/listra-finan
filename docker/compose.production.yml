name: listra

services:
  backend:
    container_name: listra-backend
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: runtime
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - APP_NAME=Listra
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_URL=http://localhost:8000
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=listra
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - LOG_CHANNEL=stack
      - LOG_DEPRECATIONS_CHANNEL=null
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
    command:
      ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
    networks:
      - listra-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  frontend:
    container_name: listra-frontend
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: runner
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      # - NEXT_PUBLIC_API_URL=http://localhost:8000
      - PORT=3000
      - HOSTNAME=0.0.0.0
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - listra-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  postgres:
    container_name: listra-postgres
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: listra
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - listra-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d listra"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  listra-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
